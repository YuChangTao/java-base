
---
kind: StatefulSet
apiVersion: apps/v1
metadata:
  name: mysql
  namespace: default
  labels:
    k8s.kuboard.cn/name: mysql
spec:
  replicas: 2
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: mysql
    spec:
      volumes:
        - name: conf
          emptyDir: {}
        - name: config-map
          configMap:
            name: mysql
            defaultMode: 420
      initContainers:
        - name: init-mysql
          image: 'mysql:8.0.19'
          command:
            - bash
            - '-c'
            - |
              set -ex
              [[ `hostname` =~ -([0-9]+)$ ]] || exit 1
              myindex=${BASH_REMATCH[1]}
              echo [mysqld] > /mnt/conf.d/server-id.cnf
              echo server-id=$((100 + ${myindex})) >> /mnt/conf.d/server-id.cnf
              if [[ ${myindex} -eq 0 ]]; then
                cp /mnt/config-map/master.cnf /mnt/conf.d/
              else
                cp /mnt/config-map/slave.cnf /mnt/conf.d/
              fi
          resources: {}
          volumeMounts:
            - name: conf
              mountPath: /mnt/conf.d
            - name: config-map
              mountPath: /mnt/config-map
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          imagePullPolicy: IfNotPresent
        - name: clone-mysql
          image: 'mzmuer/xtrabackup:1.0'
          command:
            - bash
            - '-c'
            - >
              set -ex

              [[ -d /var/lib/mysql/mysql ]] && exit 0

              [[ `hostname` =~ -([0-9]+)$ ]] || exit 1

              myindex=${BASH_REMATCH[1]}

              [[ ${myindex} -eq 0 ]] && exit 0

              ncat --recv-only mysql-$((${myindex}-1)).mysql 3307 | xbstream -x
              -C /var/lib/mysql

              xtrabackup --prepare --target-dir=/var/lib/mysql

              # --redo-only 加了会导致为提交的事务不回滚
          resources: {}
          volumeMounts:
            - name: data
              mountPath: /var/lib/mysql
              subPath: mysql
            - name: conf
              mountPath: /etc/mysql/conf.d
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          imagePullPolicy: IfNotPresent
      containers:
        - name: mysql
          image: 'mysql:8.0.19'
          args:
            - '--default-authentication-plugin=mysql_native_password'
          ports:
            - name: mysql
              containerPort: 3306
              protocol: TCP
          env:
            - name: MYSQL_ALLOW_EMPTY_PASSWORD
              value: '1'
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - name: data
              mountPath: /var/lib/mysql
              subPath: mysql
            - name: conf
              mountPath: /etc/mysql/conf.d
          livenessProbe:
            exec:
              command:
                - mysqladmin
                - ping
            initialDelaySeconds: 30
            timeoutSeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            exec:
              command:
                - mysql
                - '-h'
                - 127.0.0.1
                - '-e'
                - SELECT 1
            initialDelaySeconds: 5
            timeoutSeconds: 1
            periodSeconds: 2
            successThreshold: 1
            failureThreshold: 3
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          imagePullPolicy: IfNotPresent
        - name: xtrabackup
          image: 'mzmuer/xtrabackup:1.0'
          command:
            - bash
            - '-c'
            - |
              set -ex
              mkdir /test
              cd /var/lib/mysql
              if [[ -s xtrabackup_slave_info ]]; then
                mv xtrabackup_slave_info change_master_to.sql.in
                rm -f xtrabackup_binlog_info
              elif [[ -f xtrabackup_binlog_info ]]; then
                [[ `cat xtrabackup_binlog_info` =~ ^(.*?)[[:space:]]+(.*?)$ ]] || exit 1
                echo -e "CHANGE MASTER TO\nMASTER_LOG_FILE='${BASH_REMATCH[1]}',\nMASTER_LOG_POS=${BASH_REMATCH[2]}" > change_master_to.sql.in
                rm -f xtrabackup_binlog_info
              fi
              if [[ -f change_master_to.sql.in ]]; then
                echo "Waiting for mysqld to be ready (accepting connections)"
                until mysql -h 127.0.0.1 -e "SELECT 1"; do sleep 1; done
                echo "Initializing replication from clone position"
                mv change_master_to.sql.in change_master_to.sql.orig
                mysql -h 127.0.0.1 <<EOF
                $(<change_master_to.sql.orig),
                MASTER_HOST='mysql-0.mysql',
                MASTER_USER='repl',
                MASTER_PASSWORD='repl123.',
                MASTER_CONNECT_RETRY=10;
                START SLAVE;
              EOF
              echo "master slave config ok"
              fi
              [[ `hostname` =~ -([0-9]+)$ ]] || exit 1
              myindex=${BASH_REMATCH[1]}
              if [[ ${myindex} -eq 0 ]]; then
                mysql -h 127.0.0.1 <<EOF
                use mysql;
                delete from user where user='repl' and host='%';flush privileges;
                CREATE USER 'repl'@'%' IDENTIFIED WITH mysql_native_password BY 'repl123.';
                GRANT REPLICATION SLAVE ON *.* TO 'repl'@'%';flush privileges;
                SELECT Host, User, plugin from mysql.user;
              EOF
              else
                Slave_healthy=`mysql -h 127.0.0.1 -e 'show slave status\G' 2> /dev/null |grep -E "Slave_IO_Running|Slave_SQL_Running"|awk '{print $2}'|grep -c Yes`
                if [[ ${Slave_healthy} -eq 2 ]]; then
                  echo "master slave healthy ok"
                elif [[ ${Slave_healthy} -eq 1 ]]; then
                  echo "master slave healthy no"
                  mysql -h 127.0.0.1 <<EOF
                  stop slave;
                  reset slave;
                  start slave;
              EOF
                  echo "master slave healthy revert"
                elif [[ ${Slave_healthy} -eq 0 ]]; then
                  echo "master slave healthy no"
                  mysql -h 127.0.0.1 <<EOF
                  reset slave;
                  start slave;
              EOF
                  echo "master slave healthy revert"
                fi
              fi
              exec ncat --listen --keep-open --send-only --max-conns=1 3307 -c \
                "xtrabackup --backup --slave-info --stream=xbstream --host=127.0.0.1 --user=root"
          ports:
            - name: xtrabackup
              containerPort: 3307
              protocol: TCP
          resources:
            limits:
              cpu: 200m
              memory: 200Mi
            requests:
              cpu: 100m
              memory: 100Mi
          volumeMounts:
            - name: data
              mountPath: /var/lib/mysql
              subPath: mysql
            - name: conf
              mountPath: /etc/mysql/conf.d
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          imagePullPolicy: IfNotPresent
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      securityContext: {}
      schedulerName: default-scheduler
  volumeClaimTemplates:
    - kind: PersistentVolumeClaim
      apiVersion: v1
      metadata:
        name: data
        creationTimestamp: null
      spec:
        accessModes:
          - ReadWriteMany
        resources:
          requests:
            storage: 10Gi
        storageClassName: nfs-mysql
        volumeMode: Filesystem
      status:
        phase: Pending
  serviceName: mysql
  podManagementPolicy: OrderedReady
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      partition: 0
  revisionHistoryLimit: 10

---
kind: StatefulSet
apiVersion: apps/v1
metadata:
  name: redis
  namespace: default
  labels:
    k8s.kuboard.cn/layer: cloud
    k8s.kuboard.cn/name: redis
spec:
  replicas: 6
  selector:
    matchLabels:
      k8s.kuboard.cn/layer: cloud
      k8s.kuboard.cn/name: redis
  template:
    metadata:
      creationTimestamp: null
      labels:
        k8s.kuboard.cn/layer: cloud
        k8s.kuboard.cn/name: redis
    spec:
      volumes:
        - name: redis-conf
          configMap:
            name: redis-conf
            items:
              - key: redis-conf
                path: redis.conf
              - key: update-node.sh
                path: update-node.sh
            defaultMode: 420
      containers:
        - name: redis
          image: 'redis:5.0.12'
          command:
            - redis-server
          args:
            - /etc/redis/redis.conf
          workingDir: /etc/redis
          env:
            - name: PID_IP
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: status.podIP
          resources:
            requests:
              cpu: 100m
              memory: 500Mi
          volumeMounts:
            - name: redis-data
              mountPath: /var/lib/redis
            - name: redis-conf
              mountPath: /etc/redis
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          imagePullPolicy: IfNotPresent
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      securityContext: {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    k8s.kuboard.cn/layer: cloud
                    k8s.kuboard.cn/name: redis
                topologyKey: kubernetes.io/hostname
      schedulerName: default-scheduler
  volumeClaimTemplates:
    - kind: PersistentVolumeClaim
      apiVersion: v1
      metadata:
        name: redis-data
        creationTimestamp: null
        annotations:
          k8s.kuboard.cn/pvcType: Dynamic
      spec:
        accessModes:
          - ReadWriteMany
        resources:
          requests:
            storage: 500m
        storageClassName: nfs-redis
        volumeMode: Filesystem
      status:
        phase: Pending
  serviceName: redis
  podManagementPolicy: OrderedReady
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      partition: 0
  revisionHistoryLimit: 10

---
kind: Service
apiVersion: v1
metadata:
  name: mysql
  namespace: default
  labels:
    k8s.kuboard.cn/name: mysql
spec:
  ports:
    - name: mysql
      protocol: TCP
      port: 3306
      targetPort: 3306
      nodePort: 30921
  selector:
    app: mysql
  type: NodePort
  sessionAffinity: None
  externalTrafficPolicy: Cluster

---
kind: Service
apiVersion: v1
metadata:
  name: redis
  namespace: default
  labels:
    k8s.kuboard.cn/layer: cloud
    k8s.kuboard.cn/name: redis
spec:
  ports:
    - name: redis-port
      protocol: TCP
      port: 6379
      targetPort: 6379
      nodePort: 30953
  selector:
    k8s.kuboard.cn/layer: cloud
    k8s.kuboard.cn/name: redis
  type: NodePort
  sessionAffinity: None
  externalTrafficPolicy: Cluster

---
kind: ConfigMap
apiVersion: v1
metadata:
  name: mysql
  namespace: default
  labels:
    app: mysql
data:
  MYSQL_ROOT_PASSWORD: Bme@709394
  alarm_db.sql: >-
    CREATE DATABASE IF NOT EXISTS alarm_db;

    USE alarm_db;


    SET NAMES utf8mb4;

    SET FOREIGN_KEY_CHECKS = 0;


    -- ----------------------------

    -- Table structure for t_alarm_imag

    -- ----------------------------

    DROP TABLE IF EXISTS `t_alarm_imag`;

    CREATE TABLE `t_alarm_imag`  (
      `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '主键',
      `alarm_id` bigint(20) NULL DEFAULT 0 COMMENT '报警消息ID',
      `work_ticket_no` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '工单编码',
      `image_url` varchar(1024) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '地址',
      `create_time` datetime(0) NULL DEFAULT CURRENT_TIMESTAMP(0) COMMENT '创建时间',
      PRIMARY KEY (`id`) USING BTREE
    ) ENGINE = InnoDB AUTO_INCREMENT = 86996 CHARACTER SET = utf8 COLLATE =
    utf8_general_ci COMMENT = '报警图片表' ROW_FORMAT = Dynamic;


    -- ----------------------------

    -- Table structure for t_alarm_info

    -- ----------------------------

    DROP TABLE IF EXISTS `t_alarm_info`;

    CREATE TABLE `t_alarm_info`  (
      `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '主键',
      `device_no` varchar(30) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '设备SN编码',
      `device_name` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '设备名称',
      `signal_no` varchar(30) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '信号编码',
      `metric` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '指标',
      `category_id` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
      `value` double(14, 4) NOT NULL COMMENT '告警触发值',
      `threshold` double(14, 4) NULL DEFAULT NULL COMMENT '告警阀值',
      `rule` int(1) NULL DEFAULT NULL COMMENT '(X)分钟平均值、实时值',
      `state` int(11) NOT NULL DEFAULT 0 COMMENT '处理状态,0-告警，1-正常，2-忽略',
      `customer_id` bigint(20) NOT NULL COMMENT '客户id',
      `branch_factory_id` bigint(20) NULL DEFAULT NULL COMMENT '分厂id',
      `branch_factory` varchar(30) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '分厂/所属区域',
      `type_id` bigint(20) NULL DEFAULT NULL COMMENT '设备类型',
  master.cnf: |-
    [client]
    default-character-set=utf8mb4

    [mysql]
    default-character-set=utf8mb4

    [mysqld]

    log-bin
    binlog_expire_logs_seconds=2592000
    max_connections=1000000
    binlog_format=MIXED


    default-time-zone='+8:00'
    character-set-client-handshake=FALSE
    character-set-server=utf8mb4
    collation-server=utf8mb4_unicode_ci
    init_connect='SET NAMES utf8mb4 COLLATE utf8mb4_unicode_ci'
  slave.cnf: |-
    [client]
    default-character-set=utf8mb4

    [mysql]
    default-character-set=utf8mb4

    [mysqld]

    super-read-only
    max_connections=1000000
    binlog_format=MIXED
    relay_log_info_repository=table
    master_info_repository=table
    relay_log_recovery=1

    default-time-zone='+8:00'
    character-set-client-handshake=FALSE
    character-set-server=utf8mb4
    collation-server=utf8mb4_unicode_ci
    init_connect='SET NAMES utf8mb4 COLLATE utf8mb4_unicode_ci'

---
kind: ConfigMap
apiVersion: v1
metadata:
  name: redis-conf
  namespace: default
data:
  redis-conf: |+
    appendonly yes
    cluster-enabled yes
    cluster-config-file /var/lib/redis/nodes.conf
    cluster-node-timeout 5000
    dir /var/lib/redis
    port 6379
    protected-mode no

  update-node.sh: |
    #!/bin/sh
    CLUSTER_CONFIG="/var/lib/redis/nodes.conf"
    if [ -f ${CLUSTER_CONFIG} ]; then
      if [ -z "${POD_IP}" ]; then
        echo "Unable to determine Pod IP address!"
        exit 1
      fi
      echo "Updating my IP to ${POD_IP} in ${CLUSTER_CONFIG}"
      sed -i.bak -e '/myself/ s/[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}/'${POD_IP}'/' ${CLUSTER_CONFIG}
    fi
    exec "$@"

